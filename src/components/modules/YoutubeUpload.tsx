import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { 
  Youtube, 
  Upload, 
  List, 
  Hash, 
  FileText,
  Wand2,
  Settings,
  Globe,
  Eye,
  Clock,
  Users
} from "lucide-react";

interface VideoMetadata {
  title: string;
  description: string;
  tags: string[];
  category: string;
  privacy: "public" | "unlisted" | "private";
  playlist: string;
  language: string;
  thumbnail: string;
}

interface UploadSettings {
  autoGenerateTitle: boolean;
  autoGenerateDescription: boolean;
  autoGenerateTags: boolean;
  titleTemplate: string;
  descriptionTemplate: string;
  defaultPlaylist: string;
  defaultPrivacy: "public" | "unlisted" | "private";
  autoPublish: boolean;
}

export const YoutubeUpload = () => {
  const { toast } = useToast();
  
  const [uploadSettings, setUploadSettings] = useState<UploadSettings>({
    autoGenerateTitle: true,
    autoGenerateDescription: true,
    autoGenerateTags: true,
    titleTemplate: "{PLAYER} {CHAMPION} MASTERCLASS - {KDA} CHALLENGER GAMEPLAY",
    descriptionTemplate: "Watch {PLAYER} dominate the Korean Challenger ladder with {CHAMPION}!\n\nüèÜ Performance: {KDA}\n‚è±Ô∏è Game Duration: {DURATION}\nüéÆ Server: Korean Challenger\nüìä Rank: {RANK}\n\n#LeagueOfLegends #Challenger #Korean #ProPlay #{CHAMPION}",
    defaultPlaylist: "PLxxxxxxx-challenger-replays",
    defaultPrivacy: "public",
    autoPublish: true
  });

  const [currentVideo, setCurrentVideo] = useState<VideoMetadata>({
    title: "FAKER AZIR MASTERCLASS - 12/2/8 CHALLENGER GAMEPLAY",
    description: "Watch Faker dominate the Korean Challenger ladder with Azir!\n\nüèÜ Performance: 12/2/8 (10.0 KDA)\n‚è±Ô∏è Game Duration: 32:45\nüéÆ Server: Korean Challenger\nüìä Rank: Challenger 1,247 LP\n\n#LeagueOfLegends #Challenger #Korean #ProPlay #Azir",
    tags: ["League of Legends", "Challenger", "Korean", "Faker", "Azir", "ProPlay", "Gameplay", "Highlights"],
    category: "Gaming",
    privacy: "public",
    playlist: "PLxxxxxxx-challenger-replays",
    language: "en",
    thumbnail: "/api/placeholder/320/180"
  });

  const [playlists] = useState([
    { id: "PLxxxxxxx-challenger-replays", name: "Challenger Replays", videos: 156 },
    { id: "PLxxxxxxx-korean-highlights", name: "Korean Highlights", videos: 89 },
    { id: "PLxxxxxxx-pro-players", name: "Pro Players", videos: 234 },
    { id: "PLxxxxxxx-champion-guides", name: "Champion Guides", videos: 67 }
  ]);

  const generateMetadata = (replayData: any) => {
    if (!uploadSettings.autoGenerateTitle && !uploadSettings.autoGenerateDescription && !uploadSettings.autoGenerateTags) {
      return;
    }

    let newMetadata = { ...currentVideo };

    if (uploadSettings.autoGenerateTitle) {
      newMetadata.title = uploadSettings.titleTemplate
        .replace("{PLAYER}", replayData.player?.toUpperCase() || "PLAYER")
        .replace("{CHAMPION}", replayData.champion?.toUpperCase() || "CHAMPION")
        .replace("{KDA}", replayData.kda || "0/0/0")
        .replace("{RANK}", replayData.rank || "CHALLENGER");
    }

    if (uploadSettings.autoGenerateDescription) {
      newMetadata.description = uploadSettings.descriptionTemplate
        .replace("{PLAYER}", replayData.player || "Player")
        .replace("{CHAMPION}", replayData.champion || "Champion")
        .replace("{KDA}", replayData.kda || "0/0/0")
        .replace("{DURATION}", replayData.duration || "30:00")
        .replace("{RANK}", replayData.rank || "Challenger");
    }

    if (uploadSettings.autoGenerateTags) {
      newMetadata.tags = [
        "League of Legends",
        "Challenger",
        "Korean",
        replayData.player || "Player",
        replayData.champion || "Champion",
        "ProPlay",
        "Gameplay",
        "Highlights",
        "LOL",
        "MOBA"
      ];
    }

    setCurrentVideo(newMetadata);
    
    toast({
      title: "Metadata Generated",
      description: "Video title, description, and tags have been automatically generated.",
    });
  };

  const uploadToYoutube = () => {
    toast({
      title: "Upload Started",
      description: "Video is being uploaded to YouTube with generated metadata.",
    });

    // Simulate upload progress
    setTimeout(() => {
      toast({
        title: "Upload Complete",
        description: `Video uploaded successfully to playlist: ${playlists.find(p => p.id === currentVideo.playlist)?.name}`,
      });
    }, 5000);
  };

  const previewOnYoutube = () => {
    window.open("https://youtube.com/@ChallengerReplays", "_blank");
  };

  return (
    <div className="space-y-6">
      {/* Upload Settings */}
      <Card className="gaming-card border-gold/20">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-card-foreground">
            <Settings className="w-5 h-5 text-gold" />
            YouTube Upload Settings
          </CardTitle>
          <CardDescription>
            Configure automatic metadata generation and upload behavior
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div className="p-4 gaming-card border border-border/50">
                <h4 className="font-semibold text-card-foreground mb-3">Auto-Generation</h4>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">Auto-generate titles</span>
                    <Badge variant={uploadSettings.autoGenerateTitle ? "default" : "secondary"}>
                      {uploadSettings.autoGenerateTitle ? "ON" : "OFF"}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">Auto-generate descriptions</span>
                    <Badge variant={uploadSettings.autoGenerateDescription ? "default" : "secondary"}>
                      {uploadSettings.autoGenerateDescription ? "ON" : "OFF"}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">Auto-generate tags</span>
                    <Badge variant={uploadSettings.autoGenerateTags ? "default" : "secondary"}>
                      {uploadSettings.autoGenerateTags ? "ON" : "OFF"}
                    </Badge>
                  </div>
                </div>
              </div>

              <div className="p-4 gaming-card border border-border/50">
                <h4 className="font-semibold text-card-foreground mb-3">Default Settings</h4>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">Privacy</span>
                    <Badge variant="outline">{uploadSettings.defaultPrivacy}</Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">Auto-publish</span>
                    <Badge variant={uploadSettings.autoPublish ? "default" : "secondary"}>
                      {uploadSettings.autoPublish ? "ON" : "OFF"}
                    </Badge>
                  </div>
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <Label htmlFor="title-template">Title Template</Label>
                <Textarea
                  id="title-template"
                  value={uploadSettings.titleTemplate}
                  onChange={(e) => setUploadSettings(prev => ({ ...prev, titleTemplate: e.target.value }))}
                  className="mt-1 h-20"
                  placeholder="Use variables: {PLAYER}, {CHAMPION}, {KDA}, {RANK}"
                />
              </div>

              <div>
                <Label htmlFor="playlist-select">Default Playlist</Label>
                <Select 
                  value={uploadSettings.defaultPlaylist} 
                  onValueChange={(value) => setUploadSettings(prev => ({ ...prev, defaultPlaylist: value }))}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {playlists.map((playlist) => (
                      <SelectItem key={playlist.id} value={playlist.id}>
                        {playlist.name} ({playlist.videos} videos)
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>

          <Button
            variant="gaming"
            onClick={() => generateMetadata({
              player: "Faker",
              champion: "Azir", 
              kda: "12/2/8 (10.0 KDA)",
              duration: "32:45",
              rank: "Challenger 1,247 LP"
            })}
          >
            <Wand2 className="w-4 h-4" />
            Generate Sample Metadata
          </Button>
        </CardContent>
      </Card>

      {/* Video Metadata Editor */}
      <Card className="gaming-card border-blue-rift/20">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-card-foreground">
            <FileText className="w-5 h-5 text-blue-rift" />
            Video Metadata
          </CardTitle>
          <CardDescription>
            Review and edit generated metadata before upload
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <Label htmlFor="video-title">Title</Label>
                <Input
                  id="video-title"
                  value={currentVideo.title}
                  onChange={(e) => setCurrentVideo(prev => ({ ...prev, title: e.target.value }))}
                  className="mt-1"
                />
              </div>

              <div>
                <Label htmlFor="video-description">Description</Label>
                <Textarea
                  id="video-description"
                  value={currentVideo.description}
                  onChange={(e) => setCurrentVideo(prev => ({ ...prev, description: e.target.value }))}
                  className="mt-1 h-32"
                />
              </div>

              <div>
                <Label htmlFor="video-tags">Tags (comma-separated)</Label>
                <Textarea
                  id="video-tags"
                  value={currentVideo.tags.join(", ")}
                  onChange={(e) => setCurrentVideo(prev => ({ 
                    ...prev, 
                    tags: e.target.value.split(",").map(tag => tag.trim()).filter(Boolean)
                  }))}
                  className="mt-1 h-20"
                />
              </div>
            </div>

            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="video-category">Category</Label>
                  <Select value={currentVideo.category} onValueChange={(value) => 
                    setCurrentVideo(prev => ({ ...prev, category: value }))
                  }>
                    <SelectTrigger className="mt-1">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Gaming">Gaming</SelectItem>
                      <SelectItem value="Entertainment">Entertainment</SelectItem>
                      <SelectItem value="Sports">Sports</SelectItem>
                      <SelectItem value="Education">Education</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="video-privacy">Privacy</Label>
                  <Select value={currentVideo.privacy} onValueChange={(value: any) => 
                    setCurrentVideo(prev => ({ ...prev, privacy: value }))
                  }>
                    <SelectTrigger className="mt-1">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="public">
                        <div className="flex items-center gap-2">
                          <Globe className="w-4 h-4" />
                          Public
                        </div>
                      </SelectItem>
                      <SelectItem value="unlisted">
                        <div className="flex items-center gap-2">
                          <Eye className="w-4 h-4" />
                          Unlisted
                        </div>
                      </SelectItem>
                      <SelectItem value="private">
                        <div className="flex items-center gap-2">
                          <Users className="w-4 h-4" />
                          Private
                        </div>
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label htmlFor="video-playlist">Playlist</Label>
                <Select value={currentVideo.playlist} onValueChange={(value) => 
                  setCurrentVideo(prev => ({ ...prev, playlist: value }))
                }>
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {playlists.map((playlist) => (
                      <SelectItem key={playlist.id} value={playlist.id}>
                        <div className="flex items-center gap-2">
                          <List className="w-4 h-4" />
                          {playlist.name} ({playlist.videos})
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="p-4 gaming-card border border-border/50">
                <h4 className="font-semibold text-card-foreground mb-2">Upload Preview</h4>
                <div className="space-y-2 text-sm">
                  <div className="flex items-center gap-2">
                    <Hash className="w-4 h-4 text-muted-foreground" />
                    <span className="text-muted-foreground">{currentVideo.tags.length} tags</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-muted-foreground" />
                    <span className="text-muted-foreground">Scheduled for immediate upload</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Globe className="w-4 h-4 text-muted-foreground" />
                    <span className="text-muted-foreground capitalize">{currentVideo.privacy} video</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="flex items-center gap-4 pt-4 border-t border-border">
            <Button variant="gaming" onClick={uploadToYoutube} className="flex-1 shadow-[0_2px_8px_hsl(var(--gold)/0.2)] hover:shadow-[0_4px_12px_hsl(var(--gold)/0.3)]">
              <Upload className="w-4 h-4" />
              Upload to YouTube
            </Button>
            <Button variant="outline" onClick={previewOnYoutube}>
              <Youtube className="w-4 h-4" />
              Preview Channel
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};